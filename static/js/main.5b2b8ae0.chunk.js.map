{"version":3,"sources":["components/Emoji/Emoji.module.css","components/EmojiList/EmojiList.module.css","components/SearchBar/SearchBar.module.css","components/GithubIcon/GithubIcon.module.css","components/Emoji/Emoji.constants.tsx","components/Emoji/Emoji.tsx","components/Emoji/index.tsx","helpers.tsx","components/EmojiList/EmojiList.view.tsx","components/EmojiList/EmojiList.tsx","components/EmojiList/index.tsx","components/EmojiList/EmojiList.hooks.tsx","components/EmojiList/EmojiList.utils.tsx","components/ThemeSwitcher/ThemeSwitcher.tsx","components/ThemeSwitcher/index.tsx","components/ThemeSwitcher/ThemeSwitcher.hooks.tsx","components/SearchBar/SearchBar.tsx","components/SearchBar/index.tsx","components/GithubIcon/GithubIcon.tsx","components/GithubIcon/index.tsx","components/App/App.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","toastOptions","hideAfter","position","renderIcon","bar","color","Emoji","name","url","className","style","emoji","onClick","text","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","copyText","cogoToast","info","emojiInner","src","emojiImg","alt","emojiName","EmojiListView","emojiList","id","map","item","key","EmojiList","searchQuery","useState","loading","setLoading","error","setError","data","setData","fetchEmoji","a","fetch","response","status","json","Error","statusText","message","console","log","useEffect","useGithubApi","filteredEmoji","filterByQuery","Object","entries","filter","filterBy","replace","includes","filterEmoji","length","ThemeSwitcher","checked","setChecked","timeout","useRef","getElementById","display","current","setTimeout","documentElement","setAttribute","currentTimeout","clearTimeout","useToggleTheme","type","onChange","e","target","SearchBar","setSearchQuery","value","setValue","debounceSetSearchQuery","useCallback","debounce","placeholder","toLowerCase","searchBarInput","GithubIcon","gitHubLogo","viewBox","version","fillRule","d","App","href","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b2b8ae0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"emoji\":\"Emoji_emoji__34hTT\",\"emojiInner\":\"Emoji_emojiInner__1iH3p\",\"emojiImg\":\"Emoji_emojiImg__1vVfd\",\"emojiName\":\"Emoji_emojiName__2mPs7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emojiList\":\"EmojiList_emojiList__2MGvx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBarInput\":\"SearchBar_searchBarInput__bH-i9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gitHubLogo\":\"GithubIcon_gitHubLogo__u_cUS\"};","import React from \"react\";\nimport {Options} from \"cogo-toast\";\n\nexport const toastOptions: Options = {\n    hideAfter: 2,\n    position: 'bottom-center',\n    renderIcon: () => <span/>,\n    bar: {color: 'var(--border-color-active)'}\n};","import React from 'react';\nimport cogoToast from \"cogo-toast\";\nimport style from './Emoji.module.css';\nimport {copyText} from \"../../helpers\";\nimport {toastOptions} from \"./Emoji.constants\";\n\ninterface EmojiProps {\n    name: string,\n    url: string,\n}\n\nfunction Emoji({name, url,}: EmojiProps) {\n    const handleOnClick = () => {\n        copyText(`:${name}:`);\n        cogoToast.info('Copied to clipboard!', toastOptions);\n    };\n\n    return (\n        <div className={style.emoji} onClick={handleOnClick}>\n            <div className={style.emojiInner}>\n                <img src={url} className={style.emojiImg} alt={name}/>\n                <code className={style.emojiName}>{`:${name}:`}</code>\n            </div>\n        </div>\n    );\n}\n\nexport default Emoji;","import Emoji from \"./Emoji\";\n\nexport default Emoji","export function copyText(text: string) {\n    let textField = document.createElement('textarea');\n    textField.innerText = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n}","import React from 'react';\nimport style from \"./EmojiList.module.css\";\nimport Emoji from \"../Emoji\";\nimport {TEmojiList, TEmoji} from \"../../types\";\n\ninterface EmojiListViewProps {\n    emojiList: TEmojiList | any\n}\n\nfunction EmojiListView({emojiList}: EmojiListViewProps) {\n    return (\n        <div className={style.emojiList} id='emoji-list'>\n            {emojiList.map((item: TEmoji) => (\n                <Emoji\n                    key={item[0]}\n                    name={item[0]}\n                    url={item[1]}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default EmojiListView;","import React from 'react';\nimport {useGithubApi} from \"./EmojiList.hooks\";\nimport EmojiListView from \"./EmojiList.view\";\nimport {filterEmoji} from \"./EmojiList.utils\";\n\ninterface EmojiListProps {\n    searchQuery: string\n}\n\nfunction EmojiList({searchQuery}: EmojiListProps) {\n    const {loading, error, data} = useGithubApi('/emojis');\n\n    if (error) {\n        return <code>{error}</code>\n    }\n\n    if (loading) {\n        return <code>Loading...</code>\n    }\n\n    if (data) {\n        const filteredEmoji = filterEmoji(data, searchQuery);\n\n        if (!filteredEmoji.length) {\n            return <code>Nothing found</code>\n        }\n\n        return <EmojiListView emojiList={filteredEmoji}/>\n    }\n\n    return null\n}\n\nexport default EmojiList;","import EmojiList from \"./EmojiList\";\n\nexport default EmojiList","import {useEffect, useState} from \"react\";\n\nexport function useGithubApi(url: string) {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [error, setError] = useState<{} | null>(null);\n    const [data, setData] = useState<{} | null>(null);\n\n    const fetchEmoji = async () => {\n        setLoading(true);\n\n        try {\n            const response = await fetch(`https://api.github.com${url}`);\n\n            if (response.status === 200) {\n                const emoji = await response.json();\n                setData(emoji);\n            } else {\n                throw new Error(response.statusText);\n            }\n\n        } catch (e) {\n            setError(e.message);\n            console.log(e.message);\n        }\n\n        setLoading(false)\n    };\n\n    useEffect(() => {\n        fetchEmoji();\n    }, [url]);\n\n\n    return {loading, error, data}\n}","export function filterEmoji(data: {}, filterByQuery: string) {\n    const emojiArray = Object.entries(data);\n\n    return emojiArray.filter(item => {\n        const emojiName = item[0];\n        const filterBy = filterByQuery.replace(/:/g, '');\n\n        return emojiName.includes(filterBy)\n    });\n}","import React from 'react';\nimport './ThemeSwitcher.scss'\nimport {useToggleTheme} from \"./ThemeSwitcher.hooks\";\n\nfunction ThemeSwitcher() {\n    const [checked, setChecked] = useToggleTheme();\n\n    return (\n        <div className=\"themeWrapper\">\n            <div className=\"toggle\">\n                <input\n                    className=\"toggle-input\"\n                    type=\"checkbox\"\n                    checked={checked}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setChecked(e.target.checked)}\n                />\n                <div className=\"toggle-bg\"/>\n                <div className=\"toggle-switch\">\n                    <div className=\"toggle-switch-figure\"/>\n                    <div className=\"toggle-switch-figureAlt\"/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ThemeSwitcher;","import ThemeSwitcher from \"./ThemeSwitcher\";\n\nexport default ThemeSwitcher\n","import {useEffect, useRef, useState} from \"react\";\n// @ts-ignore\nimport Timeout from 'NodeJS';\n\nexport function useToggleTheme(): [boolean, Function] {\n    const [checked, setChecked] = useState<boolean>(true);\n\n    const timeout = useRef<Timeout>();\n\n    useEffect(() => {\n\n        const emojiList = document.getElementById('emoji-list');\n\n        if (emojiList) {\n            emojiList.style.display = 'none';\n            timeout.current! = setTimeout(() => {\n                emojiList.style.display = 'flex';\n            }, 200);\n            document.documentElement.setAttribute('data-theme', checked ? 'dark' : 'light');\n        }\n\n        const currentTimeout = timeout.current;\n\n        return () => clearTimeout(currentTimeout);\n\n    }, [checked]);\n\n\n    return [checked, setChecked];\n}","import React, {useCallback, useState} from 'react';\nimport debounce from 'lodash.debounce';\n\nimport style from './SearchBar.module.css';\n\ninterface SearchBarProps {\n    setSearchQuery: Function\n}\n\nfunction SearchBar({setSearchQuery}: SearchBarProps) {\n    const [value, setValue] = useState<string>('');\n\n    const debounceSetSearchQuery = useCallback(debounce((value: string) => {\n        setSearchQuery(value)\n    }, 350), []);\n\n    function handleFilterChange(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value.toLowerCase();\n\n        setValue(value);\n        debounceSetSearchQuery(value);\n    }\n\n    return (\n        <input\n            type=\"text\"\n            placeholder='Type to 🔎 for emoji...'\n            value={value}\n            onChange={handleFilterChange}\n            className={style.searchBarInput}\n        />\n    );\n}\n\nexport default SearchBar;","import SearchBar from \"./SearchBar\";\n\nexport default SearchBar","import React from 'react';\nimport style from './GithubIcon.module.css';\n\nfunction GithubIcon() {\n    return (\n        <svg className={style.gitHubLogo} viewBox=\"0 0 16 16\" version=\"1.1\">\n            <path\n                fillRule=\"evenodd\"\n                d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\">\n            </path>\n        </svg>\n    );\n}\n\nexport default GithubIcon;","import GithubIcon from \"./GithubIcon\";\n\nexport default GithubIcon","import React, {useState} from 'react';\n\nimport EmojiList from \"../EmojiList\";\nimport ThemeSwitcher from \"../ThemeSwitcher\";\nimport SearchBar from \"../SearchBar\";\nimport GithubIcon from \"../GithubIcon\";\n\nfunction App() {\n    const [searchQuery, setSearchQuery] = useState<string>('');\n\n    return (\n        <>\n            <nav>\n                <menu>\n                    <a href=\"https://github.com/filippofilip95/github-emoji-search-list\" target=\"_blank\">\n                        <GithubIcon/>\n                        <h1>\n                            GitHub Emoji List Search\n                        </h1>\n                    </a>\n                    <SearchBar setSearchQuery={setSearchQuery}/>\n                    <ThemeSwitcher/>\n                </menu>\n            </nav>\n            <main>\n                <EmojiList searchQuery={searchQuery}/>\n            </main>\n        </>\n    );\n};\n\nexport default App;\n","import App from \"./App\";\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}