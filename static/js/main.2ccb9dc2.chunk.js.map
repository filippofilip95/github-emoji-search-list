{"version":3,"sources":["components/Emoji/Emoji.module.css","components/Toast/Toast.module.css","components/EmojiList/EmojiList.module.css","components/SearchBar/SearchBar.module.css","components/GithubIcon/GithubIcon.module.css","components/EmojiList/EmojiList.utils.tsx","components/Emoji/Emoji.constants.tsx","components/Toast/Toast.tsx","components/Toast/index.tsx","components/Emoji/Emoji.tsx","components/Emoji/index.tsx","components/Emoji/Emoji.utils.tsx","components/EmojiList/EmojiList.view.tsx","components/EmojiList/EmojiList.tsx","components/EmojiList/index.tsx","components/EmojiList/EmojiList.hooks.tsx","components/ThemeSwitcher/ThemeSwitcher.tsx","components/ThemeSwitcher/index.tsx","components/ThemeSwitcher/ThemeSwitcher.hooks.tsx","components/SearchBar/SearchBar.tsx","components/SearchBar/index.tsx","components/GithubIcon/GithubIcon.tsx","components/GithubIcon/index.tsx","components/App/App.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","cacheName","setResponseCache","url","res","a","window","caches","open","cache","match","put","console","log","getResponseCache","cachedResponse","toastOptions","hideAfter","position","renderIcon","bar","color","Toast","name","className","style","toast","src","emojiImg","alt","emojiName","Emoji","emoji","onClick","text","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","copyText","cogoToast","info","emojiInner","EmojiListView","emojiList","isEmojiShown","display","map","item","key","EmojiList","searchQuery","useState","loading","setLoading","error","setError","data","setData","urlToFetch","fetchEmoji","response","fetch","status","clone","json","Error","statusText","message","useEffect","useGithubApi","filteredEmoji","filterByQuery","Object","entries","filter","filterBy","replace","includes","filterEmoji","length","ThemeSwitcher","setIsEmojiShown","checked","setChecked","timeoutToHide","useRef","timeoutToChangeTheme","current","setTimeout","documentElement","setAttribute","timeout1","timeout2","clearTimeout","useToggleTheme","type","onChange","e","target","SearchBar","setSearchQuery","value","setValue","debounceSetSearchQuery","useCallback","debounce","placeholder","toLowerCase","searchBarInput","GithubIcon","gitHubLogo","viewBox","version","fillRule","d","App","href","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ccb9dc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"emoji\":\"Emoji_emoji__34hTT\",\"emojiInner\":\"Emoji_emojiInner__1iH3p\",\"emojiImg\":\"Emoji_emojiImg__1vVfd\",\"emojiName\":\"Emoji_emojiName__2mPs7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emojiImg\":\"Toast_emojiImg__1BOVr\",\"emojiName\":\"Toast_emojiName__1D7-2\",\"toast\":\"Toast_toast__2Hubc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emojiList\":\"EmojiList_emojiList__2MGvx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBarInput\":\"SearchBar_searchBarInput__bH-i9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gitHubLogo\":\"GithubIcon_gitHubLogo__u_cUS\"};","export function filterEmoji(data: {}, filterByQuery: string) {\n    const emojiArray = Object.entries(data);\n\n    return emojiArray.filter(item => {\n        const emojiName = item[0];\n        const filterBy = filterByQuery.replace(/:/g, '');\n\n        return emojiName.includes(filterBy)\n    });\n}\n\nconst cacheName = 'github-emoji-list-web-cache';\n\nexport async function setResponseCache(url: RequestInfo, res: Response) {\n    if ('caches' in window) {\n        try {\n            const cache = await caches.open(cacheName);\n\n            if (cache) {\n                const hasCachedResponse = !!await cache.match(url);\n\n                if (hasCachedResponse) {\n                    return;\n                }\n\n                await cache.put(url, res);\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n\nexport async function getResponseCache(url: RequestInfo): Promise<Response | null> {\n    if ('caches' in window) {\n        try {\n            const cache = await caches.open(cacheName);\n\n            if (cache) {\n                const cachedResponse = await cache.match(url);\n\n                if (cachedResponse) {\n                    return cachedResponse;\n                }\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    return null\n}","import React from \"react\";\nimport {Options} from \"cogo-toast\";\n\nexport const toastOptions: Options = {\n    hideAfter: 2,\n    position: 'bottom-center',\n    renderIcon: () => <span/>,\n    bar: {color: 'var(--border-color-active)'}\n};","import React from 'react';\nimport style from './Toast.module.css'\n\ninterface ToastProps {\n    url: string,\n    name: string\n}\n\nfunction Toast({url, name}: ToastProps) {\n    return (\n        <div className={style.toast}>\n            <img src={url} className={style.emojiImg} alt={`emoji-${name}`}/>\n            <code className={style.emojiName}>:{name}:</code>\n            <span> Copied to clipboard!</span>\n        </div>\n    );\n}\n\nexport default Toast;","import Toast from \"./Toast\";\n\nexport default Toast;","import React from 'react';\nimport cogoToast from \"cogo-toast\";\nimport style from './Emoji.module.css';\nimport {toastOptions} from \"./Emoji.constants\";\nimport Toast from \"../Toast\";\nimport {copyText} from \"./Emoji.utils\";\n\ninterface EmojiProps {\n    name: string,\n    url: string,\n}\n\nfunction Emoji({name, url,}: EmojiProps) {\n    const handleOnClick = () => {\n        copyText(`:${name}:`);\n        // @ts-ignore\n        cogoToast.info(<Toast url={url} name={name}/>, toastOptions);\n    };\n\n    return (\n        <div className={style.emoji} onClick={handleOnClick}>\n            <div className={style.emojiInner}>\n                <img src={url} className={style.emojiImg} alt={name}/>\n                <code className={style.emojiName}>{`:${name}:`}</code>\n            </div>\n        </div>\n    );\n}\n\nexport default Emoji;","import Emoji from \"./Emoji\";\n\nexport default Emoji","export function copyText(text: string) {\n    let textField = document.createElement('textarea');\n    textField.innerText = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n}","import React from 'react';\nimport style from \"./EmojiList.module.css\";\nimport Emoji from \"../Emoji\";\nimport {TEmojiList, TEmoji} from \"../../types\";\n\ninterface EmojiListViewProps {\n    emojiList: TEmojiList | any,\n    isEmojiShown: boolean\n}\n\nfunction EmojiListView({emojiList, isEmojiShown}: EmojiListViewProps) {\n    return (\n        <div className={style.emojiList} style={{display: isEmojiShown ? 'flex' : 'none'}}>\n            {emojiList.map((item: TEmoji) => (\n                <Emoji\n                    key={item[0]}\n                    name={item[0]}\n                    url={item[1]}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default EmojiListView;","import React from 'react';\nimport {useGithubApi} from \"./EmojiList.hooks\";\nimport EmojiListView from \"./EmojiList.view\";\nimport {filterEmoji} from \"./EmojiList.utils\";\n\ninterface EmojiListProps {\n    searchQuery: string,\n    isEmojiShown: boolean\n}\n\nfunction EmojiList({searchQuery, isEmojiShown}: EmojiListProps) {\n    const {loading, error, data} = useGithubApi('/emojis');\n\n    if (error) {\n        return <code>{error}</code>\n    }\n\n    if (loading) {\n        return <code>Loading...</code>\n    }\n\n    if (data) {\n        const filteredEmoji = filterEmoji(data, searchQuery);\n\n        if (!filteredEmoji.length) {\n            return <code>Nothing found</code>\n        }\n\n        return <EmojiListView emojiList={filteredEmoji} isEmojiShown={isEmojiShown}/>\n    }\n\n    return null\n}\n\nexport default EmojiList;","import EmojiList from \"./EmojiList\";\n\nexport default EmojiList","import {useEffect, useState} from \"react\";\nimport {getResponseCache, setResponseCache} from \"./EmojiList.utils\";\n\nexport function useGithubApi(url: string) {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [error, setError] = useState<{} | null>(null);\n    const [data, setData] = useState<{} | null>(null);\n    const urlToFetch = `https://api.github.com${url}`;\n\n    const fetchEmoji = async () => {\n        setLoading(true);\n\n        try {\n            let response = await getResponseCache(urlToFetch);\n\n            if (!response) {\n                response = await fetch(urlToFetch);\n            }\n\n            if (response.status === 200) {\n                setResponseCache(urlToFetch, response.clone());\n                const emoji = await response.json();\n                setData(emoji);\n            } else {\n                throw new Error(response.statusText);\n            }\n\n        } catch (e) {\n            setError(e.message);\n            console.log(e.message);\n        }\n\n        setLoading(false)\n    };\n\n    useEffect(() => {\n        fetchEmoji();\n    }, [urlToFetch]);\n\n\n    return {loading, error, data}\n}","import React from 'react';\nimport './ThemeSwitcher.scss'\nimport {useToggleTheme} from \"./ThemeSwitcher.hooks\";\n\ninterface ThemeSwitcherProps {\n    setIsEmojiShown: Function\n}\n\nfunction ThemeSwitcher({setIsEmojiShown}: ThemeSwitcherProps) {\n    const [checked, setChecked] = useToggleTheme(setIsEmojiShown);\n\n    return (\n        <div className=\"themeWrapper\">\n            <div className=\"toggle\">\n                <input\n                    className=\"toggle-input\"\n                    type=\"checkbox\"\n                    checked={checked}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setChecked(e.target.checked)}\n                />\n                <div className=\"toggle-bg\"/>\n                <div className=\"toggle-switch\">\n                    <div className=\"toggle-switch-figure\"/>\n                    <div className=\"toggle-switch-figureAlt\"/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ThemeSwitcher;","import ThemeSwitcher from \"./ThemeSwitcher\";\n\nexport default ThemeSwitcher\n","import {useEffect, useRef, useState} from \"react\";\n// @ts-ignore\nimport Timeout from 'NodeJS';\n\nexport function useToggleTheme(setIsEmojiShown: Function): [boolean, Function] {\n    const [checked, setChecked] = useState<boolean>(true);\n    const timeoutToHide = useRef<Timeout>();\n    const timeoutToChangeTheme = useRef<Timeout>();\n\n    useEffect(() => {\n        setIsEmojiShown(false);\n\n        timeoutToHide.current! = setTimeout(() => {\n            document.documentElement.setAttribute('data-theme', checked ? 'dark' : 'light');\n\n            timeoutToChangeTheme.current! = setTimeout(() => {\n                setIsEmojiShown(true);\n            }, 200);\n\n        }, 200);\n\n\n        const timeout1 = timeoutToHide.current;\n        const timeout2 = timeoutToChangeTheme.current;\n\n        return () => {\n            clearTimeout(timeout1);\n            clearTimeout(timeout2);\n        }\n\n    }, [checked]);\n\n\n    return [checked, setChecked];\n}","import React, {useCallback, useState} from 'react';\nimport debounce from 'lodash.debounce';\n\nimport style from './SearchBar.module.css';\n\ninterface SearchBarProps {\n    setSearchQuery: Function\n}\n\nfunction SearchBar({setSearchQuery}: SearchBarProps) {\n    const [value, setValue] = useState<string>('');\n\n    const debounceSetSearchQuery = useCallback(debounce((value: string) => {\n        setSearchQuery(value)\n    }, 350), []);\n\n    function handleFilterChange(e: React.ChangeEvent<HTMLInputElement>) {\n        const value = e.target.value.toLowerCase();\n\n        setValue(value);\n        debounceSetSearchQuery(value);\n    }\n\n    return (\n        <input\n            type=\"text\"\n            placeholder='Type to 🔎 for emoji...'\n            value={value}\n            onChange={handleFilterChange}\n            className={style.searchBarInput}\n        />\n    );\n}\n\nexport default SearchBar;","import SearchBar from \"./SearchBar\";\n\nexport default SearchBar","import React from 'react';\nimport style from './GithubIcon.module.css';\n\nfunction GithubIcon() {\n    return (\n        <svg className={style.gitHubLogo} viewBox=\"0 0 16 16\" version=\"1.1\">\n            <path\n                fillRule=\"evenodd\"\n                d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\">\n            </path>\n        </svg>\n    );\n}\n\nexport default GithubIcon;","import GithubIcon from \"./GithubIcon\";\n\nexport default GithubIcon","import React, {useState} from 'react';\n\nimport EmojiList from \"../EmojiList\";\nimport ThemeSwitcher from \"../ThemeSwitcher\";\nimport SearchBar from \"../SearchBar\";\nimport GithubIcon from \"../GithubIcon\";\n\nfunction App() {\n    const [searchQuery, setSearchQuery] = useState<string>('');\n    const [isEmojiShown, setIsEmojiShown] = useState<boolean>(true);\n\n    return (\n        <>\n            <nav>\n                <menu>\n                    <a href=\"https://github.com/filippofilip95/github-emoji-search-list\" target=\"_blank\">\n                        <GithubIcon/>\n                        <h1>\n                            GitHub Emoji List Search\n                        </h1>\n                    </a>\n                    <SearchBar setSearchQuery={setSearchQuery}/>\n                    <ThemeSwitcher setIsEmojiShown={setIsEmojiShown}/>\n                </menu>\n            </nav>\n            <main>\n                <EmojiList searchQuery={searchQuery} isEmojiShown={isEmojiShown}/>\n            </main>\n        </>\n    );\n};\n\nexport default App;\n","import App from \"./App\";\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}